{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
    "meta": {
        "version": "PLCN_v1",
        "update_url": null
    },
    "exported_at": "2025-02-08T00:05:17+00:00",
    "name": "NPM json",
    "author": "eggs@nibor-informatik.cf",
    "uuid": "83301884-1eda-40bd-89ed-38cdf676d103",
    "description": "NPM run package",
    "features": null,
    "docker_images": {
        "Nodejs 23": "ghcr.io\/parkervcp\/yolks:nodejs_23",
        "Nodejs 22": "ghcr.io\/parkervcp\/yolks:nodejs_22",
        "Nodejs 21": "ghcr.io\/parkervcp\/yolks:nodejs_21",
        "Nodejs 20": "ghcr.io\/parkervcp\/yolks:nodejs_20",
        "Nodejs 19": "ghcr.io\/parkervcp\/yolks:nodejs_19",
        "Nodejs 18": "ghcr.io\/parkervcp\/yolks:nodejs_18",
        "Nodejs 17": "ghcr.io\/parkervcp\/yolks:nodejs_17",
        "Nodejs 16": "ghcr.io\/parkervcp\/yolks:nodejs_16",
        "Nodejs 14": "ghcr.io\/parkervcp\/yolks:nodejs_14",
        "Nodejs 12": "ghcr.io\/parkervcp\/yolks:nodejs_12"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then \/usr\/local\/bin\/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then \/usr\/local\/bin\/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f \/home\/container\/package.json ]; then \/usr\/local\/bin\/npm install; fi; \/usr\/local\/bin\/npm run ${NPM_COMMAND}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \"change this text 1\",\r\n        \"change this text 2\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "^^C"
    },
    "scripts": {
        "installation": {
            "script": "\"installation\": {\r\n      \"script\": \"#!\/bin\/bash\\r\\n# NodeJS App Installation Script\\r\\n#\\r\\n# Server Files: \/mnt\/server\\r\\napt update\\r\\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\\r\\n\\r\\necho -e \\\"updating npm. please wait...\\\"\\r\\nnpm install npm@latest -g\\r\\n\\r\\nmkdir -p \/mnt\/server\\r\\ncd \/mnt\/server\\r\\n\\r\\nif [ \\\"${USER_UPLOAD}\\\" == \\\"true\\\" ] || [ \\\"${USER_UPLOAD}\\\" == \\\"1\\\" ]; then\\r\\n    echo -e \\\"assuming user knows what they are doing have a good day.\\\"\\r\\n    exit 0\\r\\nfi\\r\\n\\r\\n## add git ending if it's not on the address\\r\\nif [[ ${GIT_ADDRESS} != *.git ]]; then\\r\\n    GIT_ADDRESS=${GIT_ADDRESS}.git\\r\\nfi\\r\\n\\r\\nif [ -z \\\"${USERNAME}\\\" ] && [ -z \\\"${ACCESS_TOKEN}\\\" ]; then\\r\\n    echo -e \\\"using anon api call\\\"\\r\\nelse\\r\\n    GIT_ADDRESS=\\\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\\\"\\r\\nfi\\r\\n\\r\\n## pull git js repo\\r\\nif [ \\\"$(ls -A \/mnt\/server)\\\" ]; then\\r\\n    echo -e \\\"\/mnt\/server directory is not empty.\\\"\\r\\n    if [ -d .git ]; then\\r\\n        echo -e \\\".git directory exists\\\"\\r\\n        if [ -f .git\/config ]; then\\r\\n            echo -e \\\"loading info from git config\\\"\\r\\n            ORIGIN=$(git config --get remote.origin.url)\\r\\n        else\\r\\n            echo -e \\\"files found with no git config\\\"\\r\\n            echo -e \\\"closing out without touching things to not break anything\\\"\\r\\n            exit 10\\r\\n        fi\\r\\n    fi\\r\\n\\r\\n    if [ \\\"${ORIGIN}\\\" == \\\"${GIT_ADDRESS}\\\" ]; then\\r\\n        echo \\\"pulling latest from github\\\"\\r\\n        git pull\\r\\n    fi\\r\\nelse\\r\\n    echo -e \\\"\/mnt\/server is empty.\\\\ncloning files into repo\\\"\\r\\n    if [ -z ${BRANCH} ]; then\\r\\n        echo -e \\\"cloning default branch\\\"\\r\\n        git clone ${GIT_ADDRESS} .\\r\\n    else\\r\\n        echo -e \\\"cloning ${BRANCH}'\\\"\\r\\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\\r\\n    fi\\r\\n\\r\\nfi\\r\\n\\r\\necho \\\"Installing nodejs packages\\\"\\r\\nif [[ ! -z ${NODE_PACKAGES} ]]; then\\r\\n    \/usr\/local\/bin\/npm install ${NODE_PACKAGES}\\r\\nfi\\r\\n\\r\\nif [ -f \/mnt\/server\/package.json ]; then\\r\\n    \/usr\/local\/bin\/npm install --production\\r\\nfi\\r\\n\\r\\necho -e \\\"install complete\\\"\\r\\nexit 0\",\r\n      \"container\": \"node:18-bullseye-slim\",\r\n      \"entrypoint\": \"bash\"\r\n    }",
            "container": "node:18-bullseye-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "GitHub Repository URL",
            "description": "Enter the GitHub repository URL here.\r\n\r\ne.g. https:\/\/github.com\/user\/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": null
        },
        {
            "name": "Installation Branch",
            "description": "Select the branch to install the bot",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": null
        },
        {
            "name": "Auto Update",
            "description": "Should the code be automatically updated from GitHub?",
            "env_variable": "AUTO_UPDATE",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "boolean"
            ],
            "sort": null
        },
        {
            "name": "Install npm packages",
            "description": "Install npm packages. Use space to separate packages.",
            "env_variable": "NODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": null
        },
        {
            "name": "Git Username",
            "description": "Your username.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": null
        },
        {
            "name": "Git Access Token",
            "description": "Your GitHub token",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": null
        },
        {
            "name": "Uninstall npm packages",
            "description": "Uninstall npm packages. Use space to separate packages.",
            "env_variable": "UNNODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": null
        },
        {
            "name": "Command Name",
            "description": "Enter the command name from package.json",
            "env_variable": "NPM_COMMAND",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "string",
                "max:16"
            ],
            "sort": null
        }
    ]
}